---
import { type CollectionEntry, getCollection, render } from "astro:content";
import TOC from "@/components/TOC.astro";
import TOCScript from "@/components/TOCScript.astro";
import Tags, { type Tag } from "@/components/Tags.astro";
import PostLayout from "@/layouts/PostLayout.astro";
import { Icon } from "astro-icon/components";

type ProgressEntry = CollectionEntry<"progress">;
export async function getStaticPaths() {
  const progressEntries = await getCollection("progress");
  const tags = await getCollection("tags");
  const tagNames = Object.fromEntries(
    tags.map((tag) => [tag.id, tag.data.name])
  );

  return progressEntries.map((progressEntry) => {
    const tags: Tag[] = progressEntry.data.tags.map((id) => ({
      id,
      name: tagNames[id] ?? id,
    }));

    return {
      params: { slug: progressEntry.id },
      props: { ...progressEntry, tags },
    };
  });
}

export type Props<T = ProgressEntry> = T & { tags: Tag[] };
const { ...progressEntry } = Astro.props;

const { Content, headings: _headings } = await render(progressEntry);
const headings = _headings.filter((h) => h.depth === 3);
---

<PostLayout
  title={progressEntry.data.title}
  description={`Progress on ${progressEntry.data.title}`}
>
  {headings.length > 0 && <TOCScript slot="head" />}

  <Fragment slot="aside-left">
    <nav>
      <a class="styled font-sans" href="/">
        <Icon
          name="material-symbols:arrow-back"
          class="inline-block align-middle"
        />
        <span>Home</span>
      </a>
    </nav>
    <div class="flex-1"></div>
    {
      headings.length > 0 && (
        <div class="hidden xl:block">
          <TOC headings={headings} />
        </div>
      )
    }
    {
      progressEntry.tags.length > 0 && (
        <div class="mt-5 hidden xl:block">
          <Tags tags={progressEntry.tags} />
        </div>
      )
    }
  </Fragment>

  <Fragment slot="title">
    <div class="flex flex-col">
      <h2 class="font-semibold text-2xl">
        {progressEntry.data.title}
      </h2>
      <div class="flex flex-row items-center gap-1 text-gray-11 font-sans">
        <Icon name="material-symbols:location-on-outline" />
        <span>{progressEntry.data.status}</span>
      </div>
    </div>
  </Fragment>

  <Fragment slot="article">
    <Content />
  </Fragment>

  <Fragment slot="footnotes">
    {
      progressEntry.tags.length > 0 && (
        <div class="pt-10 block xl:hidden">
          <Tags tags={progressEntry.tags} />
        </div>
      )
    }
  </Fragment>
</PostLayout>
